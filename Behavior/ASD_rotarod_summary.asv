function ASD_rotarod_summary(rot_data, saverotpath, strain)

%% simple plot of rotarod performance

Genotype = unique(rot_data.Genotype);
Animals = unique(rot_data.ASDID);
Trials = unique(rot_data.Trial);

perf = nan(length(Animals), length(Trials));
geno_list = cell(length(Animals),1);

All_geno = Genotype;

if sum(contains(All_geno, 'KO'))>0
    mutGene = 'KO';
elseif sum(contains(All_geno,'HET'))>0
    mutGene = 'HET';
elseif sum(contains(All_geno,'HEM'))>0
    mutGene = 'HEM';
end

for aa = 1:length(Animals)
    geno_list(aa)= unique(rot_data.Genotype(strcmp(rot_data.ASDID,Animals{aa})));
    tempResult = rot_data.TimeSpentOnRod(strcmp(rot_data.ASDID,Animals{aa}));
    tempFall = rot_data.fallByTurning(strcmp(rot_data.ASDID,Animals{aa}));
    tempResult(boolean(tempFall)) = NaN;
    perf(aa,:) = tempResult;
end

% ignore the performance when fall by turning

% convert time on rod to terminal speed
%perf(:,1:6) = 5 + ((40-5)/300) * perf(:,1:6);
%perf(:,7:12) = 10 + ((80-10)/300) * perf(:, 7:12);

perf= 5 + ((80-5)/300) * perf;

%geno_included = {'WT', 'HET'};
if strcmp(strain, 'Nlgn3')
    geno_included = {'WT', 'HEM'};
elseif strcmp(strain, 'Cntnap2_KO')
    geno_included = {'WT', 'KO'};
elseif strcmp(strain, 'TSC2') | strcmp(strain, 'ChD8')
    geno_included = {'WT', 'HET'};
end
figure; hold on;

% Identify groups
wt_mask  = strcmp(geno_list, 'WT');
het_geno = geno_included{2};
het_mask = strcmp(geno_list, het_geno);

% Extract performance matrices
WTdata  = perf(wt_mask, :);
HETdata = perf(het_mask, :);

% Number of animals
nWT  = size(WTdata,1);
nHET = size(HETdata,1);

% Mean + Standard Error
mean_perf_WT = nanmean(WTdata,1);
ste_perf_WT  = nanstd(WTdata, [], 1) ./ sqrt(nWT);

mean_perf_HET = nanmean(HETdata,1);
ste_perf_HET  = nanstd(HETdata, [], 1) ./ sqrt(nHET);

% Plot individual animals (thin dashed, no legend)
plot(WTdata', '--', 'Color', [0.2 0.6 1 0.3], 'LineWidth', 0.8, 'HandleVisibility','off');
plot(HETdata', '--', 'Color', [1 0.3 0.3 0.3], 'LineWidth', 0.8, 'HandleVisibility','off');

% Plot group means (thick solid, in legend)
h1 = errorbar(mean_perf_WT, ste_perf_WT, 'o-', 'Color',[0 0.3 1], ...
    'LineWidth',2, 'MarkerFaceColor',[0 0.3 1]);

h2 = errorbar(mean_perf_HET, ste_perf_HET, 'o-', 'Color',[1 0 0], ...
    'LineWidth',2, 'MarkerFaceColor',[1 0 0]);

xlabel('Trial / Block');
ylabel('Performance (% correct)');
legend([h1 h2], {'WT', 'KO'}, 'Location','Best');
title('Performance Across Learning');
box off;
legend('box', 'off')
ylabel('Performance');
set(gca,'box','off')

% ANOVA to test significance
nAnimals = size(perf,1);
nTrials = size(perf,2);

animalID = repelem((1:nAnimals)', nTrials, 1);   % animal index
trial    = repmat((1:nTrials)', nAnimals, 1);    % 1â€“12 repeated for each animal
perf_vec = reshape(perf', [], 1);                              % flatten performance
group    = repelem(geno_list, nTrials, 1);       % expand group labels

% Make table
T = table(perf_vec, group, trial, animalID, ...
          'VariableNames', {'perf','group','trial','animal'});

% Ensure correct types
T.group = categorical(T.group);          % categorical group (WT reference)
T.group = reordercats(T.group, {'WT',mutGene});
T.animal = categorical(T.animal);        % random grouping factor
T.ltrial = log(T.trial);
% Fit mixed-effects model
% Model: perf ~ group * trial + (1 | animal)
lme = fitlme(T, 'perf ~ group * trial + (trial|animal)');

disp(lme);
anovaTable = anova(lme);
p(1)       = anovaTable.pValue(strcmp(anovaTable.Term,'group'));
p(2)       = anovaTable.pValue(strcmp(anovaTable.Term,'trial'));
p(3) = anovaTable.pValue(strcmp(anovaTable.Term,'group:trial'));

    text(1, 80, ['P(geno):',num2str(p(1), '%.3g')], 'FontSize', 20 )
         text(1, 77, ['P(trial):',num2str(p(2), '%.3g')], 'FontSize', 20 )
         text(1,74, ['P(genoxtrial:',num2str(p(3), '%.3g')], 'FontSize',20)

    text(1, 20, ['WT ', num2str(nWT)], 'FontSize', 20 );
    text(1, 17, ['HET ', num2str(nHet)], 'FontSize', 20 );
% save the 

print(gcf,'-dpng',fullfile(saverotpath, 'Rotarod performance'));    %png format
saveas(gcf, fullfile(saverotpath, 'Rotarod performance'), 'fig');
saveas(gcf, fullfile(saverotpath, 'Rotarod performance'),'svg');

